#!/bin/bash
#
# This script performs a two-way sync on the development webserver back down to the local machine
# This script will not work properly unless you have the following things setup:
#
# 1) Your SSH config
#
#       You will need a host entry of "cspadev" in your `~/.ssh/config` file that references the
#       dev machine and the correct user.
#
# 2) Dev server code directory
#
#       Your code on the dev machine must be located at ~/repos/cspa.
#
#
# Usage:
#
#   $ ./devsync [up|down]
#
# Arguments:
#
#   The script takes a single optional argument, the direction of file preference.  This defaults to
#   "up".
#
#       The two-way sync of the script only updates files on the destinations when the local is newer.
#       However, this is imperfect with deleted files as it is impossible to determine whether the
#       deletion on the origin is "newer" than the existence of a file on the destination or vice versa.
#       Specifying the "up" or "down" direction give precedence to that upload direction.
#
#       For example, if a new file was created on the remote through a build script, running `bin/devsync`
#       in "up" mode would result in the deletion of that file, because by default the process uploads
#       first, treating the local as a source of truth for new files.  To fix this, run `bin/devsync down`
#       to specify that the download should occur first, treating the remote as the resource of truth
#       for new files.
#
set -e

#
# Get to project root
#
cd "$(dirname "$0")/.."

# It is always at ".", since this script pegs it with the above statement

LOCAL_DIR="./"
REMOTE_DIR="cspadev:~/repos/service-container/"


# Use rsync to bring all files from local to the remote
#
# Flags:
#  -a Archive mode: It combines the -rlptgoD options together.  This handles recursive traversal and preserving
#       symlinks, file modification times, and permissions.
#  -r Recursive (note, I found a trick where you need to postfix the source with a dot "." to get this to work properly)
#  -b Backs up the files on the destination when there are conflicts (Don't do this this is super annoying)
#  -d Deletes files that are not recognized
#  -u Ignore files on the destination that are newer (this is enabled on the source->dest, not the other way around!)
#  -v Verbose
COMMON_OPTIONS="--progress \
  --delete \
  --exclude .git \
  --exclude .idea \
  --exclude .DS_Store \
  --exclude node_modules \
  --exclude lambda/runtime \
  --exclude public/js/dev
  "

UPLOAD="rsync -avu $LOCAL_DIR. $REMOTE_DIR \
  $COMMON_OPTIONS"

DOWNLOAD="rsync -avu $REMOTE_DIR. $LOCAL_DIR \
  $COMMON_OPTIONS"

MODE="$1"

if [ "$MODE" = "down" ]; then
  echo ">> Downloading files..."
  $DOWNLOAD

  echo ">> Uploading files..."
  $UPLOAD
else
  echo ">> Uploading files..."
  $UPLOAD

  echo ">> Downloading files..."
  $DOWNLOAD
fi
